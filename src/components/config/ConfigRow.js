import React, { Component } from 'react';

import { ChromePicker } from 'react-color';

import { Collapse,
         Radio,
         Icon,
         Select,
         Slider,
         InputNumber,
         Row,
         Dropdown,
         Col , Button, Switch ,Divider } from 'antd';

import './ConfigRow.scss'

import Event from '@/util/event'

const { Panel } = Collapse;

// 参考 https://3x.ant.design/components/icon/#Custom-Font-Icon  // generated by iconfont.cn
export const MyIcon = Icon.createFromIconfontCN({
    scriptUrl : 
        '//at.alicdn.com/t/font_1663760_lf9grftcv9g.js'
});


/*
  param : {
      'min' , 
      'max' ,
      'step' ,
      'label' ,
      'value',
      'id',
      'prop',  
  },
  self : {
    onParamChange ,
  }
*/
export function NumRow( param , self) {
  if( !param ) return (<div></div>)
  return (
      <Row className="config-row" key={param['id'] + '-' + param['prop']}>

        <Col span={8}>
          <div className='config-label'>
            { param['label'] || param['prop'] } 
          </div>
        </Col>
        <Col span={10}>
          <Slider
            min={param['min']}
            max={param['max']}
            step={param['step']}
            onChange={self && self.onParamChange.bind(self , param['id']  , param['prop'] )}
            value={typeof param['value'] === 'number' ?  param['value']  : 0}
          />
        </Col>
        <Col span={2}/>
        <Col span={4}>
          <InputNumber
            size="small"
            min={param['min']}
            max={param['max']}
            step={param['step']}
            value={  param['value']  }
            onChange={self && self.onParamChange.bind(self , param['id'] , param['prop']) }
          />
        </Col>
      </Row>
  )
}


/*
  param : {
      'label' ,
      'value' : '#5c5050' , 
      'id',
      'prop',  
  },
  self : {
    onParamChange ,
  }
*/
// http://casesandberg.github.io/react-color/
export function ColorRow(param , self){
  if( !param ) return (<div></div>)
  return (
      <Row className="config-row" key={ param['id'] + '-' + param['prop'] }>
        
        <Col span={8}>
          <div className='config-label'>
            { param['label'] || param['prop'] } 
          </div>
        </Col>
        <Col span={12}/>
        <Col span={4}>
            <Dropdown 
              className='config-color'
              overlay={ 
                <ChromePicker color={param['value']} onChangeComplete={(color)=>{
                  self && self.onParamChange.call(self , param['id'] , param['prop'] , color['hex'])}}/> 
              }
            >
              <Button  style={{ 'backgroundColor': param['value'] , 'width': '90%' }}></Button>
            </Dropdown>
        </Col>
      </Row>
  )
}

/*
  param : {
      'label' ,
      'value' : true , 
      'id',
      'prop',  
  },
  self : {
    onParamChange ,
  }
*/
export function ToggleRow(param , self){
  if( !param ) return (<div></div>)

  return (
      <Row className="config-row" key={param['id'] + '-' + param['prop']}>
        <Col span={8}>
          <div className='config-label'>
            { param['label'] || param['prop'] } 
          </div>
        </Col>
        <Col span={12}></Col>
        <Col span={4}>
            <Switch 
              checked={param['value']}
              size="small"
              onChange={self && self.onParamChange.bind(self , param['id'] , param['prop']) }
             />
        </Col>
      </Row>
  )
}



/*
  param : {
      'label' ,
      'value' : true , 
      'id',
      'prop', 
      'mapId' : 0 ,
      'value' : [ innerRadius, outerRadius ],
      'unit' : 'm'
  },
  self : {
    onParamChange ,
  }
*/

export function circleRadiusRow(param ,self ){
    if(!param)  return (<div></div>)
    return  <CircleRadiusSelect  
              param={param} context={self} 
              key={ `${param['id']}-${param['prop']}-0` }
            />
}

class CircleRadiusSelect extends Component{
      constructor(props){
        super(props)
        this.state = {
           visible : true,
           disabled : false
        }
      }

      componentDidMount(){

      }
      handleCircleShowOnMap( visible ){
        let { mapId } = this.props['param']
        let ev = Event.get()
        // console.log( ev , visible)
        ev.emit(mapId + 'changeMapCircleSelectVisible' , visible)
        this.setState({  mapCircleSelectVisible : !visible })
        this.registerCallBackFuncToMap()
      }
      registerCallBackFuncToMap(){
        let { mapId } = this.props['param']
        let ev = Event.get()
        
        // 注册一次
        const name = mapId + 'endCircleRadiusChange'

        if( ev.eventNames().indexOf(name) == -1){
          ev.on( name , this.setCircleRadius , this)
        }
      }
      setCircleRadius = (value) => {
        let { innerRadius , outerRadius } = value
        console.log( innerRadius , outerRadius )

        innerRadius = floatPrecision( innerRadius , 2)
        outerRadius = floatPrecision( outerRadius , 2)
        let { context,param } = this.props
        let returnValue = [ innerRadius , outerRadius ]
        param && context && context.onParamChange.call(context , param['id'] , param['prop'] , returnValue ) 
      }
      handleVisibleChange = ( visible )=>{
         this.setState({ visible:!visible })
         this.handleCircleShowOnMap( visible )
      }
      render(){
        let { visible,disabled } = this.state 
        let { param } = this.props
        
        return(
          <div>
            <Row className="config-row" key={ `${param['id']}-${param['prop']}-1` }>
              <Col span={8}>
                <div className='config-label'>
                  { param['label'] || param['prop'] } 
                </div>
              </Col>
              <Col span={12}></Col>
              <Col span={4}>
                <Radio.Group 
                  value="small"
                  style={{
                    position : 'absolute',
                    right : '10px'
                  }}
                >
                  <Radio.Button 
                    disabled={ disabled }
                    onChange={ this.handleVisibleChange.bind(this,visible) } >
                      {   visible 
                          ? ( <Icon type="eye-invisible"  /> ) 
                          : ( <Icon type="eye"  /> )
                      }
                  </Radio.Button>
               </Radio.Group>

              </Col>
            </Row>
            <Row className="config-row" key={`${param['id']}-${param['prop']}-2`}>
              <Col span={2}/>
              <Col span={10}>
                <div className='config-label sub-row'>
                    innerRadius: { param['value'][0] }  { param['unit'] }
                </div>
              </Col>
              <Col span={2}/>
              <Col span={10}>
                <div className='config-label sub-row'>
                    outerRadius: { param['value'][1] } { param['unit'] }
                </div>
              </Col>
            </Row>  
          </div>
        )
      }
}



const floatPrecision = ( float , num ) => parseFloat( float.toFixed( num ) )